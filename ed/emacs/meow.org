#+TITLE: Rats Emacs Config
#+AUTHOR: rat
#+DESCRIPTION: emacs config for the enlightened rodentia
#+STARTUP: overview

* keybinds
#+begin_src emacs-lisp
(global-set-key (kbd "C-c w") 'split-window-right)

(global-set-key (kbd "C-c c") 'split-window-below)

(global-set-key (kbd "C-c r") 'other-window)

(global-set-key (kbd "C-c e") 'delete-window)

(global-set-key (kbd "C-c z") 'compile)

(global-set-key (kbd "C-c u") 'eval-last-sexp)

(global-set-key (kbd "C-c f") 'find-file)

(global-set-key (kbd "C-c b") 'switch-to-buffer)

(global-set-key (kbd "C-c k z") 'kill-buffer)

(global-set-key (kbd "C-c k l") 'kill-whole-line)

(global-set-key (kbd "C-c i") 'save-buffer)

(global-set-key (kbd "C-c d") 'dired-jump)

(global-set-key (kbd "C-c t m") 'text-scale-increase)

(global-set-key (kbd "C-c t n") 'text-scale-decrease)

(global-set-key (kbd "C-c j t") 'beginning-of-buffer)

(global-set-key (kbd "C-c j b") 'end-of-buffer)

(global-set-key (kbd "C-c h") 'woman)
#+end_src



* package management
** package repositories and intialization
#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src
** auto-updating package
#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src

** GCMH
#+begin_src emacs-lisp
(use-package gcmh
:config
(gcmh-mode 1))

(setq gc-cons-threshold 402653184
 gc-cons-percentage 0.6)
#+end_src

** theming
*** modus themes
#+begin_src emacs-lisp
(use-package modus-themes
  :ensure t)
#+end_src
*** gruber-darker 
#+begin_src emacs-lisp
(use-package gruber-darker-theme
  :ensure
  :config
  (load-theme 'gruber-darker t))
#+end_src
*** ef themes
#+begin_src emacs-lisp
(use-package ef-themes
  :ensure t)
#+end_src
*** ui upgrades
**** doom modeline
#+begin_src emacs-lisp
 (use-package doom-modeline
	:ensure t
   :init (doom-modeline-mode 1)
	:custom ((doom-modeline-height 15)))
#+end_src
**** all-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons
 :ensure t
 :if (display-graphic-p)
 :config
 (setq all-the-icons-scale-factor 1.0))
#+end_src
**** org-superstar
#+begin_src emacs-lisp
(use-package org-superstar)

(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src
**** line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)

(global-display-line-numbers-mode t)
#+end_src
**** font setting
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Iosevka Nerd Font" :height 200)
#+end_src
**** cleaner startup
#+begin_src emacs-lisp
(setq inhibit-startup-message t)

(setq ring-bell-function 'flash-mode-line)

(setq custom-safe-themes t)

(setq visible-bell t)

(scroll-bar-mode -1) ;disable scrollbar :)

(tool-bar-mode -1) ;disables the toolbar :)

(tooltip-mode -1) ;disables tooltips :)

(menu-bar-mode -1) ;disable menubar :)
#+end_src
** org-mode niceties
*** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/personal/OrgNotes")
  (org-roam-completion-everywhere t)
  :bind (("C-c o l" . org-roam-buffer-toggle)
         ("C-c o f" . org-roam-node-find)
         ("C-c o i" . org-roam-node-insert)
         :map org-mode-map
         ("C-c o c" . completion-at-point))
  :config
  (org-roam-setup))
#+end_src
*** org-tempo
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("cl" . "src C")))
#+end_src

** ido mode
#+begin_src emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+end_src
** swiper
#+begin_src emacs-lisp
(use-package swiper
  :defer t
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))
#+end_src

** company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :defer t
  :config
  (global-company-mode)
  (setq company-idle-delay 1.0
	  company-minimum-prefix-length 1))

(require 'company)
#+end_src

** lsp-mode
#+begin_src emacs-lisp
(use-package lsp-mode
:ensure t
:defer t
:hook ((prog-mode . lsp)
(c-mode . lsp)))
:config
(setq lsp-enable-snippet t)
  (setq lsp-pylsp-server '("pylsp"))

(use-package lsp-ui
:ensure t
:after lsp-mode
:config
(setq lsp-ui-doc-enable t
      lsp-ui-sideline-enable t
      lsp-ui-imenu-enable t))
#+end_src




* useful settings
#+begin_src emacs-lisp
(column-number-mode 1)

(setq-default tab-width 4)

(setq org-hide-emphasis-markers t)

(electric-indent-mode -1)

(setq org-adapt-indentation nil)

(setq org-edit-src-content-indentation 0)

(setq custom-safe-themes t)

(global-auto-revert-mode t)

(setq org-hide-leading-stars non-nil)
#+end_src





